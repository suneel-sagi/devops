Cron is one of Linux’s most useful tools and a developer favorite because it allows you to run automated commands at specific periods, dates, 
and intervals using both general-purpose and task-specific scripts. Given that description, you can imagine how system admins use it to automate backup tasks, 
directory cleaning, notifications, etc.

Cron jobs run in the background and constantly check the /etc/crontab file, and the /etc/cron.*/ and /var/spool/cron/ directories. 
The cron files are not supposed to be edited directly and each user has a unique crontab.
How then are you supposed to create and edit cron jobs? With crontab commands. The crontab is the method you use to create, edit, install, uninstall, 
and list cron jobs.
The command for creating and editing cron jobs is the same and simple. 
And what’s even cooler is that you don’t need to restart cron after creating new files or editing existing ones.

cd /root/etc/crontab
find / -name *cron*
$ crontab -e

Cron Syntax
Just as it is with any language, working with cron is a lot easier when you understand its syntax and there are 2 formats you should know:

A B C D E USERNAME /path/to/command arg1 arg2
OR
A B C D E USERNAME /root/backup.sh

Explanation of above cron syntax:

A: Minutes range: 0 – 59
B: Hours range: 0 – 23
C: Days range: 0 – 31
D: Months range: 0 – 12
E: Days of the week range: 0 – 7. Starting from Monday, 0 or 7 represents Sunday
USERNAME: replace this with your username
/path/to/command – The name of the script or command you want to schedule
That’s not all. Cron uses 3 operator symbols which allow you to specify multiple values in a field:

Asterisk (*): specifies all possible values for a field
The comma (,): specifies a list of values
Dash (-): specifies a range of values
Separator (/): specifies a step value
Now that you know Cron’s syntax and operators, let’s see some cron examples.


